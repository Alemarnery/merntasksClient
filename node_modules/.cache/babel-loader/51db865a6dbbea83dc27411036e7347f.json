{"ast":null,"code":"var _jsxFileName = \"/Users/alemar/Workspace/MERNTASKS/cliente/src/components/tareas/FormTarea.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\n\nconst FormTarea = () => {\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const {\n    proyecto\n  } = proyectosContext; // obtener la funci贸n del context de tarea\n\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea\n  } = tareasContext; // Effect que detecta si hay una tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: \"\"\n      });\n    }\n  }, [tareaseleccionada]); // State del formulario\n\n  const [tarea, guardarTarea] = useState({\n    nombre: \"\"\n  }); // extraer el nombre del proyecto\n\n  const {\n    nombre\n  } = tarea; // Si no hay proyecto seleccionado\n\n  if (!proyecto) return null; // Array destructuring para extraer el proyecto actual\n\n  const [proyectoActual] = proyecto; // Leer los valores del formulario\n\n  const handleChange = e => {\n    guardarTarea({ ...tarea,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault(); // validar\n\n    if (nombre.trim() === \"\") {\n      validarTarea();\n      return;\n    } // Si es edici贸n o si es nueva tarea\n\n\n    if (tareaseleccionada === null) {\n      // agregar la nueva tarea al state de tareas\n      tarea.proyecto = proyectoActual._id;\n      agregarTarea(tarea);\n    } else {\n      // actualizar tarea existente\n      actualizarTarea(tarea); // Elimina tareaseleccionada del state\n\n      limpiarTarea();\n    } // Obtener y filtrar las tareas del proyecto actual\n\n\n    obtenerTareas(proyectoActual.id); // reiniciar el form\n\n    guardarTarea({\n      nombre: \"\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formulario\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Nombre Tarea...\",\n    name: \"nombre\",\n    value: nombre,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    \"data-cy\": \"submit-nueva-tarea\",\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\",\n    value: tareaseleccionada ? \"Editar Tarea\" : \"Agregar Tarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }))), errortarea ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"El nombre de la tarea es obligatorio\") : null);\n};\n\nexport default FormTarea;","map":{"version":3,"sources":["/Users/alemar/Workspace/MERNTASKS/cliente/src/components/tareas/FormTarea.js"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormTarea","proyectosContext","proyecto","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","obtenerTareas","actualizarTarea","limpiarTarea","guardarTarea","nombre","tarea","proyectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","_id","id"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\n\nconst FormTarea = () => {\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const { proyecto } = proyectosContext;\n\n  // obtener la funci贸n del context de tarea\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea,\n  } = tareasContext;\n\n  // Effect que detecta si hay una tarea seleccionada\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: \"\",\n      });\n    }\n  }, [tareaseleccionada]);\n\n  // State del formulario\n  const [tarea, guardarTarea] = useState({\n    nombre: \"\",\n  });\n\n  // extraer el nombre del proyecto\n  const { nombre } = tarea;\n\n  // Si no hay proyecto seleccionado\n  if (!proyecto) return null;\n\n  // Array destructuring para extraer el proyecto actual\n  const [proyectoActual] = proyecto;\n\n  // Leer los valores del formulario\n  const handleChange = (e) => {\n    guardarTarea({\n      ...tarea,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // validar\n    if (nombre.trim() === \"\") {\n      validarTarea();\n      return;\n    }\n\n    // Si es edici贸n o si es nueva tarea\n    if (tareaseleccionada === null) {\n      // agregar la nueva tarea al state de tareas\n      tarea.proyecto = proyectoActual._id;\n      agregarTarea(tarea);\n    } else {\n      // actualizar tarea existente\n      actualizarTarea(tarea);\n\n      // Elimina tareaseleccionada del state\n      limpiarTarea();\n    }\n    // Obtener y filtrar las tareas del proyecto actual\n    obtenerTareas(proyectoActual.id);\n\n    // reiniciar el form\n    guardarTarea({\n      nombre: \"\",\n    });\n  };\n\n  return (\n    <div className=\"formulario\">\n      <form onSubmit={onSubmit}>\n        <div className=\"contenedor-input\">\n          <input\n            type=\"text\"\n            className=\"input-text\"\n            placeholder=\"Nombre Tarea...\"\n            name=\"nombre\"\n            value={nombre}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"contenedor-input\">\n          <input\n            data-cy=\"submit-nueva-tarea\"\n            type=\"submit\"\n            className=\"btn btn-primario btn-submit btn-block\"\n            value={tareaseleccionada ? \"Editar Tarea\" : \"Agregar Tarea\"}\n          />\n        </div>\n      </form>\n\n      {errortarea ? (\n        <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p>\n      ) : null}\n    </div>\n  );\n};\n\nexport default FormTarea;\n"]},"metadata":{},"sourceType":"module"}